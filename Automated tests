WHAT IS AN AUTOMATED SOFTWARE TESTING?
  Software Test automation makes use of specialized tools to control the execution of tests and compares the actual results against the expected result. Usually regression tests, which are repetitive actions, are automated.
Testing Tools not only help us to perform regression tests, but also helps us to automate data set up generation, product installation, GUI interaction, defect logging, etc.

SOME MISCONCEPTIONS ABOUT AUTOMATION TESTING
Over the years, there have been raised some misconceptions about test automation, which should be clarified:
Misconception #1. Automation is here to replace manual testers.
Test automation is for helping the testers to make testing faster and in a more reliable manner. It can never replace humans.
Automation testing is used to quickly test most of the repeated, long and boring tests and save time and energy to focus and test new and important functionality.
Tools can click on objects. But where to click will always be told by a manual tester. 

Misconception #2. Everything under the sun can be automated
If you try to automate 100% of your test cases, maybe you will be able to do so, but if that you could do, then our first point becomes false. Because if everything is automated, what will manual tester do?
Actually the point is, you cannot automate 100% of your test cases. There will always be some scenarios which we will miss. There will always be bugs that come only when the application will be used by clients. Also, there are always scenarios which are difficult to automate and are easier to do manually.
So, we should not try to automate everything. Only automate those scenarios which are important and take a lot of time to do manually.

Misconception #3. Automation only involves recording and playback. 
This misconception is actually created by false advertisements from different automation tool vendors. They say you just record and playback your steps and your test cases will be automated, which is a big lie!
Automation is everything but recording and playback. Pure automation engineers normally don’t use recording and playback feature at all. Recording and playback are generally used to get an idea how the tool is generating script for our steps. Once you get to know the scripting, you always use scripting to create automated tests

Why Automated Testing?

Automation does not overpower or replace manual testing but it compliments it. Like manual, automation too needs a strategy with proper planning, monitoring & control. Automation, when implemented correctly, can become an asset to the team, project and ultimately to the organization.
There are many advantages of automation and here are few important to mention:
•	Useful to execute the routine tasks like smoke tests and regression tests.
•	Useful in preparing the test data.
•	Helps to execute the test cases which involve complex business logic.
•	Good to execute the cross platform test cases (like different OS, browsers etc.)
•	Great to execute the test cases which are a bit difficult to execute manually.
•	Used when the number of iterations of the test case executions are not known.

It’s vital to understand that automation is the best way to increase the effectiveness, efficiency and coverage of testing. It not only saves time but also improves accuracy as repetitive tasks via manual approach can prone to human errors and can be time consuming.

Basic Mistake to Avoid on automation:
One of the most basic mistakes which testers make is NOT selecting the correct test cases for automation.
Don’t just select any test suite. Analyze the test cases thoroughly and select the candidates for automation considering the most important factor. 
There is no standard procedure of determining the correct test cases for automation. It all depends upon the application you are testing.
How to Select Correct Test Cases for Automation Testing
Step 1: - Identify the parameters on which you will base your test case as a candidate for automation.
Step 2: - Break each application into modules. For each module, analyze and try to identify the test cases which should be automated based on the parameters. This list will vary for projects to projects and can also be enhanced to suite your needs:
Step 3: - Consolidate and group the number of test cases for each module
Step 4: - Once you have identified all the granular level details, calculate the ROI.
Manual to Automation Testing – What are the Process Challenges?
Below, you can find the points which are a big challenge, when trying to automate a test suite. 
#1. Automation Need: Every test team is unique and has an exclusive need for automation. We cannot develop a fix standard, but we can tailor a standard which will suite our need.  Because of this reason, automation does require a good support from the management as well as from the development team.
#2. Automating the complete application: Automating 100% application is almost impossible. It requires proper planning and monitoring and of course; some time. There are lots of permutations and combinations of data, n number of environments with n number of authentication and authorization attributes which needs to be validated and hence requires a strategy to automate.
#3. Manual Vs Automation mentality: “We normally automate which is important and repetitive, but we prefer to test the important functionality manually”. We should have a criteria which will decide which are the important test cases. These criteria can be based on multiple factors like complex business logics, areas which are of more interest to clients, risk prone areas etc.
#4. Deciding on the framework: Designing the framework is the most important facet of automation. We should devote relatively more time to develop the framework than to script. Whenever we develop the automation plan, framework designing should be the main focus. If the framework is rock solid, scripting and maintaining becomes easy.
#5. Knowledge of the team: Whenever we think of automation, we immediately jump to learn the programming language or scripting language. Learning these language will definitely help but more emphasis should be on building and developing logic. Automation should be the responsibility of entire team. This will help not only to enhance the skills of the resources, but also keep them motivated.
#6. Reporting: Every tool has a standard to report the test results. To customize it is a challenging task. Reporting the test results also requires coordination and maintenance which adds to the cost.
#7. Trust: We should trust our automation stuff. The team who is doing the manual testing of the application, should be involved to automate it as they know their application. 
